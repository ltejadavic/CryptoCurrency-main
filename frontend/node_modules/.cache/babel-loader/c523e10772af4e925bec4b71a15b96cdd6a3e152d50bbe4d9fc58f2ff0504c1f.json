{"ast":null,"code":"var _jsxFileName = \"/Users/luistejada/Downloads/FinalProject/frontend/src/components/ListaCriptomonedas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ListaCriptomonedas = () => {\n  _s();\n  const [criptomonedas, setCriptomonedas] = useState({});\n  const [saldo, setSaldo] = useState(0);\n  const [criptoSeleccionada, setCriptoSeleccionada] = useState('');\n  const [montoInvertido, setMontoInvertido] = useState(0);\n  const [mensaje, setMensaje] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Obtener criptomonedas de la API y manejar el localStorage\n      axios.get('http://api.coinlayer.com/live', {\n        params: {\n          access_key: process.env.REACT_APP_COINLAYER_API_KEY,\n          target: 'USD'\n        }\n      }).then(response => {\n        const preciosCriptomonedas = response.data.rates;\n        console.log('Criptomonedas obtenidas:', preciosCriptomonedas); // Verificar que se obtengan los datos correctamente\n        setCriptomonedas(preciosCriptomonedas);\n\n        // Verificar si existe el JSON en localStorage\n        const preciosGuardados = localStorage.getItem('preciosCriptos');\n        if (!preciosGuardados) {\n          // Si no existe, guardarlo en localStorage\n          localStorage.setItem('preciosCriptos', JSON.stringify(preciosCriptomonedas));\n          console.log('Precios guardados en localStorage por primera vez.');\n        } else {\n          // Si ya existe, actualizar con los nuevos datos\n          localStorage.setItem('preciosCriptos', JSON.stringify(preciosCriptomonedas));\n          console.log('Precios de criptomonedas actualizados en localStorage.');\n        }\n      }).catch(error => {\n        console.error('Error al obtener criptomonedas de la API', error);\n        setMensaje('Error al obtener las criptomonedas.');\n      });\n\n      // Obtener saldo del usuario\n      axios.get('http://localhost:5000/api/saldo', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => setSaldo(response.data.saldo)).catch(error => console.error('Error al obtener el saldo', error));\n    }\n  }, []);\n  const handleInvertir = async () => {\n    if (!criptoSeleccionada || montoInvertido <= 0) {\n      setMensaje('Selecciona una criptomoneda y un monto v치lido.');\n      return;\n    }\n    if (montoInvertido > saldo) {\n      setMensaje('No tienes suficiente saldo para esta inversi칩n.');\n      return;\n    }\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.post('http://localhost:5000/api/portafolio/invertir', {\n        criptomoneda: criptoSeleccionada,\n        monto: montoInvertido\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMensaje(`Has invertido ${montoInvertido} USD en ${criptoSeleccionada}.`);\n    } catch (error) {\n      setMensaje('Error al realizar la inversi칩n.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lista de Criptomonedas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), criptomonedas && Object.keys(criptomonedas).length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.keys(criptomonedas).map(simbolo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [simbolo, \": $\", criptomonedas[simbolo], /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCriptoSeleccionada(simbolo),\n          children: \"Seleccionar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)]\n      }, simbolo, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando criptomonedas...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), criptoSeleccionada && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Invertir en \", criptoSeleccionada]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Saldo disponible: $\", saldo]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: saldo,\n        value: montoInvertido,\n        onChange: e => setMontoInvertido(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Monto a invertir: $\", montoInvertido]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleInvertir,\n        children: \"Invertir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/home'),\n      children: \"Volver a Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mensaje\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(ListaCriptomonedas, \"vw/g1uRXQggEnB3asQ0cU0chX6U=\", false, function () {\n  return [useNavigate];\n});\n_c = ListaCriptomonedas;\nexport default ListaCriptomonedas;\nvar _c;\n$RefreshReg$(_c, \"ListaCriptomonedas\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ListaCriptomonedas","_s","criptomonedas","setCriptomonedas","saldo","setSaldo","criptoSeleccionada","setCriptoSeleccionada","montoInvertido","setMontoInvertido","mensaje","setMensaje","navigate","token","localStorage","getItem","get","params","access_key","process","env","REACT_APP_COINLAYER_API_KEY","target","then","response","preciosCriptomonedas","data","rates","console","log","preciosGuardados","setItem","JSON","stringify","catch","error","headers","Authorization","handleInvertir","post","criptomoneda","monto","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","map","simbolo","onClick","type","min","max","value","onChange","e","Number","_c","$RefreshReg$"],"sources":["/Users/luistejada/Downloads/FinalProject/frontend/src/components/ListaCriptomonedas.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\nconst ListaCriptomonedas: React.FC = () => {\n  const [criptomonedas, setCriptomonedas] = useState<{ [key: string]: number }>({});\n  const [saldo, setSaldo] = useState(0);  \n  const [criptoSeleccionada, setCriptoSeleccionada] = useState('');\n  const [montoInvertido, setMontoInvertido] = useState(0);  \n  const [mensaje, setMensaje] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    \n    if (token) {\n      // Obtener criptomonedas de la API y manejar el localStorage\n      axios.get('http://api.coinlayer.com/live', {\n        params: {\n          access_key: process.env.REACT_APP_COINLAYER_API_KEY,\n          target: 'USD',\n        }\n      })\n      .then(response => {\n        const preciosCriptomonedas = response.data.rates;\n        console.log('Criptomonedas obtenidas:', preciosCriptomonedas); // Verificar que se obtengan los datos correctamente\n        setCriptomonedas(preciosCriptomonedas);\n        \n        // Verificar si existe el JSON en localStorage\n        const preciosGuardados = localStorage.getItem('preciosCriptos');\n        \n        if (!preciosGuardados) {\n          // Si no existe, guardarlo en localStorage\n          localStorage.setItem('preciosCriptos', JSON.stringify(preciosCriptomonedas));\n          console.log('Precios guardados en localStorage por primera vez.');\n        } else {\n          // Si ya existe, actualizar con los nuevos datos\n          localStorage.setItem('preciosCriptos', JSON.stringify(preciosCriptomonedas));\n          console.log('Precios de criptomonedas actualizados en localStorage.');\n        }\n      })\n      .catch(error => {\n        console.error('Error al obtener criptomonedas de la API', error);\n        setMensaje('Error al obtener las criptomonedas.');\n      });\n\n      // Obtener saldo del usuario\n      axios.get('http://localhost:5000/api/saldo', {\n        headers: { Authorization: `Bearer ${token}` }\n      })\n      .then(response => setSaldo(response.data.saldo))\n      .catch(error => console.error('Error al obtener el saldo', error));\n    }\n  }, []);\n\n  const handleInvertir = async () => {\n    if (!criptoSeleccionada || montoInvertido <= 0) {\n      setMensaje('Selecciona una criptomoneda y un monto v치lido.');\n      return;\n    }\n\n    if (montoInvertido > saldo) {\n      setMensaje('No tienes suficiente saldo para esta inversi칩n.');\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.post('http://localhost:5000/api/portafolio/invertir', \n        { criptomoneda: criptoSeleccionada, monto: montoInvertido },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setMensaje(`Has invertido ${montoInvertido} USD en ${criptoSeleccionada}.`);\n    } catch (error) {\n      setMensaje('Error al realizar la inversi칩n.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Lista de Criptomonedas</h2>\n      {criptomonedas && Object.keys(criptomonedas).length > 0 ? (\n        <ul>\n          {Object.keys(criptomonedas).map((simbolo) => (\n            <li key={simbolo}>\n              {simbolo}: ${criptomonedas[simbolo]}\n              <button onClick={() => setCriptoSeleccionada(simbolo)}>Seleccionar</button>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Cargando criptomonedas...</p>\n      )}\n\n      {criptoSeleccionada && (\n        <>\n          <h3>Invertir en {criptoSeleccionada}</h3>\n          <p>Saldo disponible: ${saldo}</p>\n          <input \n            type=\"range\" \n            min=\"0\" \n            max={saldo} \n            value={montoInvertido} \n            onChange={(e) => setMontoInvertido(Number(e.target.value))} \n          />\n          <p>Monto a invertir: ${montoInvertido}</p>\n          <button onClick={handleInvertir}>Invertir</button>\n        </>\n      )}\n\n      <button onClick={() => navigate('/home')}>Volver a Home</button>\n      <p>{mensaje}</p>\n    </div>\n  );\n};\n\nexport default ListaCriptomonedas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}